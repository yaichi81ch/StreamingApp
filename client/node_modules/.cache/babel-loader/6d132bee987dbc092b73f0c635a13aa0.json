{"ast":null,"code":"import _classCallCheck from \"/Users/sakamotoyaichi/StreamingApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sakamotoyaichi/StreamingApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sakamotoyaichi/StreamingApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sakamotoyaichi/StreamingApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sakamotoyaichi/StreamingApp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sakamotoyaichi/StreamingApp/client/src/components/streams/StreamShow.js\";\nimport React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nvar StreamShow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StreamShow, _React$Component);\n\n  function StreamShow(props) {\n    var _this;\n\n    _classCallCheck(this, StreamShow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamShow).call(this, props));\n    _this.videoRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(StreamShow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var id = this.props.match.params.id;\n      console.log(this.videoRef);\n      this.props.fetchStream(id);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.buildPlayer();\n    }\n  }, {\n    key: \"buildPlayer\",\n    value: function buildPlayer() {\n      if (this.player || this.props.stream) {\n        return;\n      }\n\n      var id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: \"http://localhost:8000/live/\".concat(id, \"/flv\")\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.props.stream) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      var _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, description));\n    }\n  }]);\n\n  return StreamShow;\n}(React.Component);\n\n;\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  console.log(ownProps);\n  return {\n    stream: state.streamReducer[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream: fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/sakamotoyaichi/StreamingApp/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","props","videoRef","createRef","id","match","params","console","log","buildPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","title","description","width","Component","mapStateToProps","state","ownProps","streamReducer"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;;IAEMC,U;;;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgBN,KAAK,CAACO,SAAN,EAAhB;AAHiB;AAIlB;;;;wCAEmB;AAAA,UACVC,EADU,GACH,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MADd,CACVF,EADU;AAGlBG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,QAAjB;AACA,WAAKD,KAAL,CAAWF,WAAX,CAAuBK,EAAvB;AACD;;;yCAEoB;AACnB,WAAKK,WAAL;AACD;;;kCAEa;AACZ,UAAI,KAAKC,MAAL,IAAe,KAAKT,KAAL,CAAWU,MAA9B,EAAsC;AACpC;AACD;;AAHW,UAKJP,EALI,GAKG,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MALpB,CAKJF,EALI;AAMZ,WAAKM,MAAL,GAAcb,GAAG,CAACe,YAAJ,CAAiB;AAC7BC,QAAAA,IAAI,EAAE,KADuB;AAE7BC,QAAAA,GAAG,uCAAgCV,EAAhC;AAF0B,OAAjB,CAAd;AAIA,WAAKM,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACD;;;6BAEQ;AACP,UAAI,CAAC,KAAKhB,KAAL,CAAWU,MAAhB,EAAwB;AACtB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD;;AAHM,+BAKwB,KAAKV,KAAL,CAAWU,MALnC;AAAA,UAKCO,KALD,sBAKCA,KALD;AAAA,UAKQC,WALR,sBAKQA,WALR;AAMP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,GAAG,EAAE,KAAKjB,QAAjB;AAA2B,QAAA,KAAK,EAAE;AAAEkB,UAAAA,KAAK,EAAE;AAAT,SAAlC;AAAqD,QAAA,QAAQ,EAAE,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,KAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,WAAJ,CAHF,CADF;AAOD;;;;EA7CsBvB,KAAK,CAACyB,S;;AA8C9B;;AAED,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3CjB,EAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ;AACA,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,aAAN,CAAoBD,QAAQ,CAACnB,KAAT,CAAeC,MAAf,CAAsBF,EAA1C;AAAV,GAAP;AACD,CAHD;;AAKA,eAAeN,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA,WAAW,EAAXA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from \"react\";\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n\n    console.log(this.videoRef)\n    this.props.fetchStream(id);\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  buildPlayer() {\n    if (this.player || this.props.stream) {\n      return;\n    }\n\n    const { id } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}/flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n\n    const { title, description } = this.props.stream;\n    return (\n      <div>\n        <video ref={this.videoRef} style={{ width: '100%' }} controls={true} />\n        <h3>{title}</h3>\n        <p>{description}</p>\n      </div>\n    )\n  }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(ownProps);\n  return { stream: state.streamReducer[ownProps.match.params.id] };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);\n"]},"metadata":{},"sourceType":"module"}